{"version":3,"file":"defimist-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/utils.ts","../src/errors.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/routable-platform.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/fractions/priced-token-amount.ts","../src/entities/liquidity-mining-campaign.ts","../src/entities/priced-token.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport PERMISSIVE_MULTICALL_ABI from './abis/PermissiveMulticall.json'\nimport STAKING_REWARDS_FACTORY_ABI from './abis/staking-rewards-distribution-factory.json'\nimport STAKING_REWARDS_DISTRIBUTION_ABI from './abis/staking-rewards-distribution.json'\nimport {\n  rinkeby as coreRinkeby,\n  mainnet as coreMainnet,\n  arbitrumTestnetV3 as coreArbitrumTestnetV3,\n  sokol as coreSokol,\n  dm as coreXDMT\n} from 'defimist-core/.contracts.json'\nimport {\n  rinkeby as peripheryRinkeby,\n  mainnet as peripheryMainnet,\n  arbitrumTestnetV3 as peripheryArbitrumTestnetV3,\n  sokol as peripherySokol,\n  dm as peripheryXDMT\n} from 'defimist-periphery/.contracts.json'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  RINKEBY = 4,\n  ARBITRUM_TESTNET_V3 = 79377087078960,\n  SOKOL = 77,\n  DM = 100\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: coreMainnet.factory,\n  [ChainId.RINKEBY]: coreRinkeby.factory,\n  [ChainId.ARBITRUM_TESTNET_V3]: coreArbitrumTestnetV3.factory,\n  [ChainId.SOKOL]: coreSokol.factory,\n  [ChainId.DM]: coreXDMT.factory\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]?: string } = {\n  [ChainId.RINKEBY]: peripheryRinkeby.router,\n  [ChainId.MAINNET]: peripheryMainnet.router,\n  [ChainId.ARBITRUM_TESTNET_V3]: peripheryArbitrumTestnetV3.router,\n  [ChainId.SOKOL]: peripherySokol.router,\n  [ChainId.DM]: peripheryXDMT.router\n}\n\nexport const STAKING_REWARDS_FACTORY_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0000000000000000000000000000000000001234',\n  [ChainId.RINKEBY]: '0x163a3640Ce993A0b4c11885a6D4dAc16DFC188e1',\n  [ChainId.ARBITRUM_TESTNET_V3]: '0xB95Ad562EDE8DD78BBFC287fA18150e802b09D9F',\n  [ChainId.SOKOL]: '0xD436e756Cf41318ADeC62E8dCbEF2608753Ae068',\n  [ChainId.DM]: '0xCD2A45F36464FdB1065160e03A2353996Ea8Ff57'\n}\n\nexport const DMSWAP_TOKEN_LIST_ID: { [chainId: number]: number } = {\n  [ChainId.MAINNET]: 1,\n  [ChainId.RINKEBY]: 1,\n  [ChainId.ARBITRUM_TESTNET_V3]: 1,\n  [ChainId.SOKOL]: 1,\n  [ChainId.DM]: 5\n}\n\nexport const INIT_CODE_HASH = '0xd306a548755b9295ee49cc729e13ca4a45e00199bbd890fa146da43a50571776'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _25 = JSBI.BigInt(25)\nexport const SECONDS_IN_YEAR = JSBI.BigInt(31536000)\nexport const _30 = JSBI.BigInt(30)\nexport const _100 = JSBI.BigInt(100)\nexport const _1000 = JSBI.BigInt(1000)\nexport const _10000 = JSBI.BigInt(10000)\n\nexport const defaultSwapFee = _25\nexport const defaultProtocolFeeDenominator = FIVE\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n\nconst PERMISSIVE_MULTICALL_ADDRESS: { [chainId: number]: string } = {\n  [ChainId.MAINNET]: '0x0946f567d0ed891e6566c1da8e5093517f43571d',\n  [ChainId.RINKEBY]: '0x798d8ced4dff8f054a5153762187e84751a73344',\n  [ChainId.ARBITRUM_TESTNET_V3]: '0x73a08DC74eF4ed2c360199244bb69F1464204E7C',\n  [ChainId.SOKOL]: '0x4D97Bd8eFaCf46b33c4438Ed0B7B6AABfa2359FB',\n  [ChainId.DM]: '0x4E75068ED2338fCa56631E740B0723A6dbc1d5CD'\n}\n\nexport {\n  PERMISSIVE_MULTICALL_ABI,\n  PERMISSIVE_MULTICALL_ADDRESS,\n  STAKING_REWARDS_FACTORY_ABI,\n  STAKING_REWARDS_DISTRIBUTION_ABI\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ChainId, SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on the target chain.\n *\n * The only instances of the base class `Currency` are native currencies such as Ether for Ethereum,\n * SPOA for the Sokol testnet and DM for DM.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  // fiat currencies used to represent countervalues\n  public static readonly USD: Currency = new Currency(18, 'USD', 'US dollar')\n\n  // Native currencies for deployment chains\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n  public static readonly SPOA: Currency = new Currency(18, 'SPOA', 'Sokol POA')\n  public static readonly DM: Currency = new Currency(18, 'DM', 'Defimist')\n\n  private static readonly NATIVE_CURRENCY: { [chainId in ChainId]: Currency } = {\n    [ChainId.MAINNET]: Currency.ETHER,\n    [ChainId.RINKEBY]: Currency.ETHER,\n    [ChainId.ARBITRUM_TESTNET_V3]: Currency.ETHER,\n    [ChainId.SOKOL]: Currency.SPOA,\n    [ChainId.DM]: Currency.DM\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static isNative(currency: Currency): boolean {\n    return Object.values(Currency.NATIVE_CURRENCY).indexOf(currency) >= 0\n  }\n\n  public static getNative(chainId: ChainId): Currency {\n    return Currency.NATIVE_CURRENCY[chainId]\n  }\n}\n\nexport const USD = Currency.USD\n\nexport const ETHER = Currency.ETHER\nexport const SPOA = Currency.SPOA\nexport const DM = Currency.DM\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public static readonly WETH: { [key: number]: Token } = {\n    [ChainId.MAINNET]: new Token(\n      ChainId.MAINNET,\n      '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.RINKEBY]: new Token(\n      ChainId.RINKEBY,\n      '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.ARBITRUM_TESTNET_V3]: new Token(\n      ChainId.ARBITRUM_TESTNET_V3,\n      '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.SOKOL]: new Token(\n      ChainId.SOKOL,\n      '0xfDc50eF6b67F65Dddc36e56729a9D07BAe1A1f68',\n      18,\n      'WETH',\n      'Wrapped Ether'\n    ),\n    [ChainId.DM]: new Token(\n      ChainId.DM,\n      '0x6a023ccd1ff6f2045c3309768ead9e68f978f6e1',\n      18,\n      'WETH',\n      'Wrapped Ether on xDMT'\n    )\n  }\n\n  public static readonly WSPOA: { [key: number]: Token } = {\n    [ChainId.SOKOL]: new Token(ChainId.SOKOL, '0xc655c6D80ac92d75fBF4F40e95280aEb855B1E87', 18, 'WSPOA', 'Wrapped SPOA')\n  }\n\n  public static readonly WDM: { [key: number]: Token } = {\n    [ChainId.DM]: new Token(ChainId.DM, '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d', 18, 'WDM', 'Wrapped DM')\n  }\n\n  public static readonly DMC: { [key: number]: Token } = {\n    [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xa1d65E8fB6e87b60FECCBc582F7f97804B725521', 18, 'DMC', 'Defimist Coin'),\n    [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0x554898A0BF98aB0C03ff86C7DccBE29269cc4d29', 18, 'DMC', 'Defimist Coin'),\n    [ChainId.DM]: new Token(\n      ChainId.DM,\n      '0xb90d6bec20993be5d72a5ab353343f7a0281f158',\n      18,\n      'DMC',\n      'Defimist Coin from Ethereum'\n    )\n  }\n\n  private static readonly NATIVE_CURRENCY_WRAPPER: { [chainId in ChainId]: Token } = {\n    [ChainId.MAINNET]: Token.WETH[ChainId.MAINNET],\n    [ChainId.RINKEBY]: Token.WETH[ChainId.RINKEBY],\n    [ChainId.ARBITRUM_TESTNET_V3]: Token.WETH[ChainId.ARBITRUM_TESTNET_V3],\n    [ChainId.SOKOL]: Token.WSPOA[ChainId.SOKOL],\n    [ChainId.DM]: Token.WDM[ChainId.DM]\n  }\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  public static getNativeWrapper(chainId: ChainId): Token {\n    return Token.NATIVE_CURRENCY_WRAPPER[chainId]\n  }\n\n  public static isNativeWrapper(token: Token): boolean {\n    return Token.NATIVE_CURRENCY_WRAPPER[token.chainId].equals(token)\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\n// reexport for convenience\nexport const WETH = Token.WETH\nexport const WSPOA = Token.WSPOA\nexport const DMC = Token.DMC\nexport const WDM = Token.WDM\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, USD } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static nativeCurrency(amount: BigintIsh, chainId: number): CurrencyAmount {\n    const nativeCurrency = Currency.getNative(chainId)\n    invariant(!!nativeCurrency, 'NO_NATIVE_CURRENCY')\n    return new CurrencyAmount(nativeCurrency, amount)\n  }\n\n  /**\n   * Helper that calls the constructor with the USD currency\n   * @param amount amount of usd experessed in wei (with 18 decimals resolution)\n   */\n  public static usd(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(USD, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, ChainId, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.nativeCurrency(super.multiply(currencyAmount.raw).quotient, ChainId.MAINNET)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { BigintIsh, ChainId, defaultSwapFee, FACTORY_ADDRESS, INIT_CODE_HASH, ROUTER_ADDRESS, _30 } from '../constants'\n\nconst UNISWAP_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nconst SUSHISWAP_FACTORY_ADDRESS = '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac'\nconst HONEYSWAP_FACTORY_ADDRESS = '0xA818b4F111Ccac7AA31D0BCc0806d64F2E0737D7'\nconst BAOSWAP_FACTORY_ADDRESS = '0x45de240fbe2077dd3e711299538a09854fae9c9b'\nconst LEVINSWAP_FACTORY_ADDRESS = '0x965769C9CeA8A7667246058504dcdcDb1E2975A5'\n\nconst UNISWAP_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nconst SUSHISWAP_ROUTER_ADDRESS = '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F'\nconst HONEYSWAP_ROUTER_ADDRESS = '0x1C232F01118CB8B424793ae03F870aa7D0ac7f77'\nconst BAOSWAP_ROUTER_ADDRESS = '0x6093AeBAC87d62b1A5a4cEec91204e35020E38bE'\nconst LEVINSWAP_ROUTER_ADDRESS = '0xb18d4f69627F8320619A696202Ad2C430CeF7C53'\n\n\n/**\n * A platform to which Defimist can route through.\n */\nexport class RoutablePlatform {\n  public readonly name: string\n  public readonly factoryAddress: { [supportedChainId in ChainId]?: string }\n  public readonly routerAddress: { [supportedChainId in ChainId]?: string }\n  public readonly initCodeHash: string\n  public readonly defaultSwapFee: BigintIsh\n\n  public static readonly DEFIMIST = new RoutablePlatform(\n    'Defimist',\n    FACTORY_ADDRESS,\n    ROUTER_ADDRESS,\n    INIT_CODE_HASH,\n    defaultSwapFee\n  )\n  public static readonly UNISWAP = new RoutablePlatform(\n    'Uniswap',\n    { [ChainId.MAINNET]: UNISWAP_FACTORY_ADDRESS, [ChainId.RINKEBY]: UNISWAP_FACTORY_ADDRESS },\n    { [ChainId.MAINNET]: UNISWAP_ROUTER_ADDRESS, [ChainId.RINKEBY]: UNISWAP_ROUTER_ADDRESS },\n    '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n    _30\n  )\n  public static readonly SUSHISWAP = new RoutablePlatform(\n    'Sushiswap',\n    { [ChainId.MAINNET]: SUSHISWAP_FACTORY_ADDRESS, [ChainId.RINKEBY]: SUSHISWAP_FACTORY_ADDRESS },\n    { [ChainId.MAINNET]: SUSHISWAP_ROUTER_ADDRESS, [ChainId.RINKEBY]: SUSHISWAP_ROUTER_ADDRESS },\n    '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\n    _30\n  )\n  public static readonly HONEYSWAP = new RoutablePlatform(\n    'Honeyswap',\n    { [ChainId.DM]: HONEYSWAP_FACTORY_ADDRESS },\n    { [ChainId.DM]: HONEYSWAP_ROUTER_ADDRESS },\n    '0x3f88503e8580ab941773b59034fb4b2a63e86dbc031b3633a925533ad3ed2b93',\n    _30\n  )\n  public static readonly BAOSWAP = new RoutablePlatform(\n    'Baoswap',\n    { [ChainId.DM]: BAOSWAP_FACTORY_ADDRESS },\n    { [ChainId.DM]: BAOSWAP_ROUTER_ADDRESS },\n    '0x0bae3ead48c325ce433426d2e8e6b07dac10835baec21e163760682ea3d3520d',\n    _30\n  )\n  public static readonly LEVINSWAP = new RoutablePlatform(\n    'Levinswap',\n    { [ChainId.DM]: LEVINSWAP_FACTORY_ADDRESS },\n    { [ChainId.DM]: LEVINSWAP_ROUTER_ADDRESS },\n    '0x4955fd9146732ca7a64d43c7a8d65fe6db1acca27e9c5b3bee7c3abe5849f441',\n    _30\n  )\n\n  public constructor(\n    name: string,\n    factoryAddress: { [supportedChainId in ChainId]?: string },\n    routerAddress: { [supportedChainId in ChainId]?: string },\n    initCodeHash: string,\n    defaultSwapFee: BigintIsh\n  ) {\n    this.name = name\n    this.factoryAddress = factoryAddress\n    this.routerAddress = routerAddress\n    this.initCodeHash = initCodeHash\n    this.defaultSwapFee = defaultSwapFee\n  }\n\n  public supportsChain(chainId: ChainId): boolean {\n    return !!this.factoryAddress[chainId]\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  _30,\n  _10000,\n  defaultSwapFee,\n  defaultProtocolFeeDenominator\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { ChainId } from '../constants'\nimport { RoutablePlatform } from './routable-platform'\nimport { LiquidityMiningCampaign } from './liquidity-mining-campaign'\n\nconst INITIAL_CACHE_STATE = {\n  [ChainId.MAINNET]: {},\n  [ChainId.RINKEBY]: {},\n  [ChainId.ARBITRUM_TESTNET_V3]: {},\n  [ChainId.SOKOL]: {},\n  [ChainId.DM]: {}\n}\n\nlet PAIR_ADDRESS_CACHE: {\n  [supportedPlatformName: string]: {\n    [chainId: number]: { [token0Address: string]: { [token1Address: string]: string } }\n  }\n} = {\n  [RoutablePlatform.DEFIMIST.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.SUSHISWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.UNISWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.HONEYSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.BAOSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  },\n  [RoutablePlatform.LEVINSWAP.name]: {\n    ...INITIAL_CACHE_STATE\n  }\n}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly swapFee: BigintIsh = defaultSwapFee\n  public readonly protocolFeeDenominator: BigintIsh = defaultProtocolFeeDenominator\n  public readonly platform: RoutablePlatform\n  public liquidityMiningCampaigns: LiquidityMiningCampaign[]\n\n  /**\n   * Returns true if the two pairs are equivalent, i.e. have the same address (calculated using create2).\n   * @param other other pair to compare\n   */\n  public equals(other: Pair): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.liquidityToken.address === other.liquidityToken.address\n  }\n\n  public static getAddress(tokenA: Token, tokenB: Token, platform: RoutablePlatform = RoutablePlatform.DEFIMIST): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const chainId = tokenA.chainId\n    invariant(platform.supportsChain(chainId), 'INVALID_PLATFORM_CHAIN_ID')\n    if (PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [platform.name]: {\n          ...PAIR_ADDRESS_CACHE[platform.name],\n          [chainId]: {\n            ...PAIR_ADDRESS_CACHE[platform.name][chainId],\n            [tokens[0].address]: {\n              ...PAIR_ADDRESS_CACHE?.[platform.name]?.[chainId]?.[tokens[0].address],\n              [tokens[1].address]: getCreate2Address(\n                platform.factoryAddress[chainId] as string,\n                keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n                platform.initCodeHash\n              )\n            }\n          }\n        }\n      }\n    }\n    return PAIR_ADDRESS_CACHE[platform.name][chainId][tokens[0].address][tokens[1].address]\n  }\n\n  constructor(\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    swapFee?: BigintIsh,\n    protocolFeeDenominator?: BigintIsh,\n    platform: RoutablePlatform = RoutablePlatform.DEFIMIST,\n    liquidityMiningCampaigns: LiquidityMiningCampaign[] = []\n  ) {\n    invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_ID')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n\n    this.platform = platform ? platform : RoutablePlatform.DEFIMIST\n    const liquidityTokenAddress = Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform)\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, liquidityTokenAddress, 18, 'DMS', 'Defimist Swap')\n    this.protocolFeeDenominator = protocolFeeDenominator ? protocolFeeDenominator : defaultProtocolFeeDenominator\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.swapFee = swapFee ? swapFee : platform.defaultSwapFee\n    this.liquidityMiningCampaigns = liquidityMiningCampaigns\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, JSBI.subtract(_10000, parseBigintIsh(this.swapFee)))\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _10000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _10000)\n    const denominator = JSBI.multiply(\n      JSBI.subtract(outputReserve.raw, outputAmount.raw),\n      JSBI.subtract(_10000, parseBigintIsh(this.swapFee))\n    )\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new Pair(\n        inputReserve.add(inputAmount),\n        outputReserve.subtract(outputAmount),\n        this.swapFee,\n        this.protocolFeeDenominator\n      )\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, parseBigintIsh(this.protocolFeeDenominator)), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency } from './currency'\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      pairs.every(pair => pair.platform === pairs[0].platform),\n      'PLATFORM'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (Currency.isNative(input) && pairs[0].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (Currency.isNative(output) && pairs[pairs.length - 1].involvesToken(Token.getNativeWrapper(pairs[0].chainId))),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : Token.getNativeWrapper(pairs[0].chainId)]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { RoutablePlatform } from './routable-platform'\nimport { Route } from './route'\nimport { currencyEquals, Token } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (Currency.isNative(currencyAmount.currency))\n    return new TokenAmount(Token.getNativeWrapper(chainId), currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (Currency.isNative(currency)) return Token.getNativeWrapper(chainId)\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n  /**\n   * The unique identifier of the chain on which the swap is being performed (used to correctly handle the native currency).\n   */\n  public readonly chainId: ChainId\n  /**\n   * The swap platform this trade will execute on\n   */\n  public readonly platform: RoutablePlatform\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    this.chainId = route.chainId\n\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : Currency.isNative(route.input)\n        ? CurrencyAmount.nativeCurrency(amounts[0].raw, this.chainId)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : Currency.isNative(route.output)\n        ? CurrencyAmount.nativeCurrency(amounts[amounts.length - 1].raw, this.chainId)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n    this.platform = this.route.pairs[0].platform\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountOut, this.chainId)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.nativeCurrency(slippageAdjustedAmountIn, this.chainId)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { BigintIsh } from '../../constants'\nimport { PricedToken } from '../priced-token'\nimport { CurrencyAmount } from './currencyAmount'\nimport { TokenAmount } from './tokenAmount'\nimport { utils } from 'ethers'\n\nexport class PricedTokenAmount extends TokenAmount {\n  public readonly token: PricedToken\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: PricedToken, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public get nativeCurrencyAmount(): CurrencyAmount {\n    return new CurrencyAmount(\n      this.token.price.quoteCurrency,\n      utils\n        .parseUnits(\n          this.multiply(this.token.price).toFixed(this.token.price.quoteCurrency.decimals),\n          this.token.price.quoteCurrency.decimals\n        )\n        .toString()\n    )\n  }\n}\n","import { BigintIsh, ChainId, SECONDS_IN_YEAR } from '../constants'\nimport JSBI from 'jsbi'\nimport { parseBigintIsh } from '../utils'\nimport { CurrencyAmount, Fraction, Percent, TokenAmount } from './fractions'\nimport { PricedTokenAmount } from './fractions/priced-token-amount'\nimport { Pair } from './pair'\nimport invariant from 'tiny-invariant'\nimport { utils } from 'ethers'\nimport { Token } from './token'\n\n// this value is used as a floor to calculate apy, in order to avoid infinite results\nconst MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY: { [chainId in ChainId]: CurrencyAmount } = {\n  [ChainId.RINKEBY]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.RINKEBY).decimals).toString(),\n    ChainId.RINKEBY\n  ),\n  [ChainId.MAINNET]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.1', Token.getNative(ChainId.MAINNET).decimals).toString(),\n    ChainId.MAINNET\n  ),\n  [ChainId.DM]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.DM).decimals).toString(),\n    ChainId.DM\n  ),\n  [ChainId.SOKOL]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('1000', Token.getNative(ChainId.SOKOL).decimals).toString(),\n    ChainId.SOKOL\n  ),\n  [ChainId.ARBITRUM_TESTNET_V3]: CurrencyAmount.nativeCurrency(\n    utils.parseUnits('0.05', Token.getNative(ChainId.ARBITRUM_TESTNET_V3).decimals).toString(),\n    ChainId.ARBITRUM_TESTNET_V3\n  )\n}\n\nexport class LiquidityMiningCampaign {\n  public readonly chainId: ChainId\n  public readonly address?: string\n  public readonly startsAt: BigintIsh\n  public readonly endsAt: BigintIsh\n  public readonly rewards: PricedTokenAmount[]\n  public readonly targetedPair: Pair\n  public readonly staked: PricedTokenAmount\n  public readonly duration: BigintIsh\n  public readonly locked: boolean\n  public readonly stakingCap: TokenAmount\n\n  constructor(\n    startsAt: BigintIsh,\n    endsAt: BigintIsh,\n    targetedPair: Pair,\n    rewards: PricedTokenAmount[],\n    staked: PricedTokenAmount,\n    locked: boolean,\n    stakingCap: TokenAmount,\n    address?: string\n  ) {\n    invariant(JSBI.lessThan(parseBigintIsh(startsAt), parseBigintIsh(endsAt)), 'INCONSISTENT_DATES')\n    invariant(staked.token.equals(targetedPair.liquidityToken), 'STAKED_LP_TOKEN')\n    for (const reward of rewards) {\n      invariant(staked.token.chainId === reward.token.chainId, 'CHAIN_ID')\n    }\n    this.chainId = staked.token.chainId\n    this.startsAt = startsAt\n    this.endsAt = endsAt\n    this.rewards = rewards\n    this.targetedPair = targetedPair\n    this.staked = staked\n    this.duration = JSBI.subtract(parseBigintIsh(endsAt), parseBigintIsh(startsAt))\n    this.locked = locked\n    this.stakingCap = stakingCap\n    this.address = address\n  }\n\n  public get remainingDistributionPercentage(): Percent {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    const jsbiStartsAt = parseBigintIsh(this.startsAt)\n    const jsbiEndsAt = parseBigintIsh(this.endsAt)\n    if (JSBI.lessThan(now, jsbiStartsAt)) return new Percent('100', '100')\n    if (JSBI.greaterThanOrEqual(now, jsbiEndsAt)) return new Percent('0', '100')\n    return new Percent(JSBI.subtract(jsbiEndsAt, now), this.duration)\n  }\n\n  public get remainingRewards(): PricedTokenAmount[] {\n    const remainingDistributionPercentage = this.remainingDistributionPercentage\n    return this.rewards.map(reward => {\n      return new PricedTokenAmount(reward.token, remainingDistributionPercentage.multiply(reward.raw).toFixed(0))\n    })\n  }\n\n  public get apy(): Percent {\n    const remainingRewards = this.remainingRewards\n\n    let stakedValueNativeCurrency = this.staked.nativeCurrencyAmount\n    if (stakedValueNativeCurrency.lessThan(MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId])) {\n      stakedValueNativeCurrency = MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY[this.chainId]\n    }\n\n    const cumulativeRemainingRewardAmountNativeCurrency = remainingRewards.reduce(\n      (accumulator, remainingRewardAmount) => {\n        return accumulator.add(remainingRewardAmount.nativeCurrencyAmount)\n      },\n      CurrencyAmount.nativeCurrency('0', this.chainId)\n    )\n\n    const yieldInPeriod = cumulativeRemainingRewardAmountNativeCurrency.divide(stakedValueNativeCurrency)\n    const annualizationMultiplier = new Fraction(SECONDS_IN_YEAR.toString(), this.duration.toString())\n    const rawApy = yieldInPeriod.multiply(annualizationMultiplier)\n    return new Percent(rawApy.numerator, rawApy.denominator)\n  }\n\n  public get currentlyActive(): boolean {\n    const now = JSBI.BigInt(Math.floor(Date.now() / 1000))\n    return (\n      JSBI.lessThanOrEqual(parseBigintIsh(this.startsAt), now) && JSBI.greaterThan(parseBigintIsh(this.endsAt), now)\n    )\n  }\n\n  public get ended(): boolean {\n    return JSBI.greaterThan(JSBI.BigInt(Math.floor(Date.now() / 1000)), parseBigintIsh(this.endsAt))\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { Price } from './fractions'\nimport { Token } from './token'\n\n/**\n * Represents an ERC20 token and its price, expressed in any given currency.\n */\nexport class PricedToken extends Token {\n  public readonly price: Price\n\n  constructor(chainId: ChainId, address: string, decimals: number, price: Price, symbol?: string, name?: string) {\n    invariant(price.baseCurrency.symbol === symbol && price.baseCurrency.decimals === decimals, 'TOKEN')\n    super(chainId, address, decimals, symbol, name)\n    this.price = price\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { Currency, CurrencyAmount, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const nativeCurrency = Currency.getNative(trade.chainId)\n    const etherIn = trade.inputAmount.currency === nativeCurrency\n    const etherOut = trade.outputAmount.currency === nativeCurrency\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import JSBI from 'jsbi'\nimport { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IDefimistPair from 'defimist-core/build/IDefimistPair.json'\nimport IDefimistFactory from 'defimist-core/build/IDefimistFactory.json'\nimport invariant from 'tiny-invariant'\nimport {\n  ChainId,\n  BigintIsh,\n  FACTORY_ADDRESS,\n  PERMISSIVE_MULTICALL_ADDRESS,\n  PERMISSIVE_MULTICALL_ABI\n} from './constants'\nimport { Token } from './entities/token'\nimport { RoutablePlatform } from './entities/routable-platform'\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId)),\n    platform: RoutablePlatform = RoutablePlatform.DEFIMIST\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, platform)\n    const [reserves0, reserves1] = await new Contract(address, IDefimistPair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    const tokenAmountA = new TokenAmount(tokenA, balances[0])\n    const tokenAmountB = new TokenAmount(tokenB, balances[1])\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, platform),\n      18,\n      'DMS',\n      'Defimist Swap'\n    )\n    const swapFee = JSBI.BigInt(await new Contract(liquidityToken.address, IDefimistPair.abi, provider).swapFee())\n    const protocolFeeDenominator = JSBI.BigInt(\n      await new Contract(\n        FACTORY_ADDRESS[tokenAmountA.token.chainId],\n        IDefimistFactory.abi,\n        provider\n      ).protocolFeeDenominator()\n    )\n    return new Pair(tokenAmountA, tokenAmountB, swapFee, protocolFeeDenominator)\n  }\n\n  /**\n   * Fetches swap fee information from a liquidity token of a token pair\n   * @param liquidityToken the liquidity token from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFee(\n    liquidityToken: Token,\n    provider = getDefaultProvider(getNetwork(liquidityToken.chainId))\n  ): Promise<{\n    fee: BigintIsh\n    owner: string\n  }> {\n    return {\n      fee: JSBI.BigInt(await new Contract(liquidityToken.address, IDefimistPair.abi, provider).swapFee()),\n      owner: await new Contract(FACTORY_ADDRESS[liquidityToken.chainId], IDefimistFactory.abi, provider).feeToSetter()\n    }\n  }\n\n  /**\n   * Fetches swap fee information from liquidity tokens of token pairs\n   * @param liquidityToken the liquidity tokens from which the swap fee info will be fetched\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchSwapFees(\n    liquidityTokens: Token[],\n    provider = getDefaultProvider(getNetwork(liquidityTokens[0].chainId))\n  ): Promise<\n    {\n      fee: BigintIsh\n      owner: string\n    }[]\n  > {\n    const multicall = new Contract(\n      PERMISSIVE_MULTICALL_ADDRESS[liquidityTokens[0].chainId],\n      PERMISSIVE_MULTICALL_ABI,\n      provider\n    )\n    const factoryContract = new Contract(FACTORY_ADDRESS[liquidityTokens[0].chainId], IDefimistFactory.abi, provider)\n    const liquidityTokenContract = new Contract(liquidityTokens[0].address, IDefimistPair.abi, provider)\n    let calls = []\n    calls.push({\n      address: factoryContract.address,\n      callData: factoryContract.interface.encodeFunctionData(factoryContract.interface.getFunction('feeToSetter()'))\n    })\n    for (let tokenPairsIndex = 0; tokenPairsIndex < liquidityTokens.length; tokenPairsIndex++) {\n      calls.push({\n        address: liquidityTokens[tokenPairsIndex].address,\n        callData: liquidityTokenContract.interface.encodeFunctionData(\n          liquidityTokenContract.interface.getFunction('swapFee()')\n        )\n      })\n    }\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    const owner = factoryContract.interface.decodeFunctionResult(\n      factoryContract.interface.getFunction('feeToSetter()'),\n      result.returnData[0]\n    )[0]\n    let fees = []\n    for (let resultIndex = 1; resultIndex < result.returnData.length; resultIndex++) {\n      fees.push({\n        fee: JSBI.BigInt(\n          liquidityTokenContract.interface.decodeFunctionResult(\n            liquidityTokenContract.interface.getFunction('swapFee()'),\n            result.returnData[resultIndex]\n          )[0]\n        ),\n        owner\n      })\n    }\n    return fees\n  }\n\n  /**\n   * Fetches swap fee information of all registered token pairs from factory\n   * @param chainId the chainId of the network to fecth the swap fees\n   * @param swapFeesCache a cache of already fetched fees to be skiped\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchAllSwapFees(\n    chainId: ChainId,\n    swapFeesCache: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {},\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    [key: string]: {\n      fee: BigintIsh\n      owner: string\n    }\n  }> {\n    const multicall = new Contract(PERMISSIVE_MULTICALL_ADDRESS[chainId], PERMISSIVE_MULTICALL_ABI, provider)\n    const factoryContract = new Contract(FACTORY_ADDRESS[chainId], IDefimistFactory.abi, provider)\n    const allPairsLength = await factoryContract.allPairsLength()\n    let allSwapPairs: {\n      [key: string]: {\n        fee: BigintIsh\n        owner: string\n      }\n    } = {}\n\n    // Get first token pairs from cache\n    let tokenPairsCache = Object.keys(swapFeesCache)\n    let tokenPairsToFetch: Token[] = []\n    for (let tokenPaisCacheIndex = 0; tokenPaisCacheIndex < tokenPairsCache.length; tokenPaisCacheIndex++) {\n      allSwapPairs[tokenPairsCache[tokenPaisCacheIndex]] = {\n        fee: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].fee,\n        owner: swapFeesCache[tokenPairsCache[tokenPaisCacheIndex]].owner\n      }\n    }\n\n    // Get rest of the token pairs that are not cached\n    let calls = []\n    for (let pairIndex = tokenPairsCache.length; pairIndex < allPairsLength; pairIndex++)\n      calls.push({\n        address: factoryContract.address,\n        callData: factoryContract.interface.encodeFunctionData(\n          factoryContract.interface.getFunction('allPairs(uint)'),\n          [pairIndex]\n        )\n      })\n    const result = await multicall.aggregate(calls.map(call => [call.address, call.callData]))\n    for (let resultIndex = 0; resultIndex < result.returnData.length; resultIndex++) {\n      const tokenPairAddress = factoryContract.interface.decodeFunctionResult(\n        factoryContract.interface.getFunction('allPairs(uint256)'),\n        result.returnData[resultIndex]\n      )[0]\n      tokenPairsToFetch.push(new Token(chainId, tokenPairAddress, 18, 'DMS', 'Defimist Swap'))\n    }\n\n    // Fetch the pairs that we dont have the fee and owner\n    const swapFeesFetched = await this.fetchSwapFees(tokenPairsToFetch, provider)\n    for (let tokenPairsToFetchIndex = 0; tokenPairsToFetchIndex < tokenPairsToFetch.length; tokenPairsToFetchIndex++)\n      allSwapPairs[tokenPairsToFetch[tokenPairsToFetchIndex].address] = swapFeesFetched[tokenPairsToFetchIndex]\n    return allSwapPairs\n  }\n\n  /**\n   * Fetches protocol fee information from the token pair factory\n   * @param chainId the chainId of the network to fecth the protocol fee\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchProtocolFee(\n    chainId: ChainId,\n    provider = getDefaultProvider(getNetwork(chainId))\n  ): Promise<{\n    feeDenominator: BigintIsh\n    feeReceiver: string\n  }> {\n    const factoryContract = await new Contract(FACTORY_ADDRESS[chainId], IDefimistFactory.abi, provider)\n    const feeDenominator = await factoryContract.protocolFeeDenominator()\n    const feeReceiver = await factoryContract.feeTo()\n    return { feeDenominator, feeReceiver }\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS","MAINNET","coreMainnet","factory","RINKEBY","coreRinkeby","ARBITRUM_TESTNET_V3","coreArbitrumTestnetV3","SOKOL","coreSokol","DM","coreXDMT","ROUTER_ADDRESS","peripheryRinkeby","router","peripheryMainnet","peripheryArbitrumTestnetV3","peripherySokol","peripheryXDMT","STAKING_REWARDS_FACTORY_ADDRESS","DMSWAP_TOKEN_LIST_ID","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_25","SECONDS_IN_YEAR","_30","_100","_1000","_10000","defaultSwapFee","defaultProtocolFeeDenominator","SOLIDITY_TYPE_MAXIMA","uint8","uint256","PERMISSIVE_MULTICALL_ADDRESS","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","Currency","decimals","symbol","isNative","currency","values","NATIVE_CURRENCY","indexOf","getNative","chainId","ETHER","SPOA","USD","Token","equals","other","this","sortsBefore","toLowerCase","getNativeWrapper","NATIVE_CURRENCY_WRAPPER","isNativeWrapper","token","currencyEquals","currencyA","currencyB","WETH","WSPOA","WDM","DMC","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","amount","parsedAmount","exponentiate","nativeCurrency","usd","raw","toExact","TokenAmount","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","RoutablePlatform","factoryAddress","routerAddress","initCodeHash","supportsChain","INITIAL_CACHE_STATE","PAIR_ADDRESS_CACHE","DEFIMIST","SUSHISWAP","UNISWAP","HONEYSWAP","BAOSWAP","LEVINSWAP","Pair","tokenAmountA","tokenAmountB","swapFee","protocolFeeDenominator","platform","liquidityMiningCampaigns","tokenAmounts","liquidityTokenAddress","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE3","_PAIR_ADDRESS_CACHE3$","_PAIR_ADDRESS_CACHE3$2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","PricedTokenAmount","price","utils","parseUnits","MINIMUM_STAKED_AMOUNT_NATIVE_CURRENCY","LiquidityMiningCampaign","startsAt","endsAt","targetedPair","rewards","staked","locked","stakingCap","duration","now","Math","floor","Date","jsbiStartsAt","jsbiEndsAt","remainingDistributionPercentage","map","reward","remainingRewards","stakedValueNativeCurrency","nativeCurrencyAmount","yieldInPeriod","remainingRewardAmount","annualizationMultiplier","rawApy","PricedToken","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","deadline","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","Fetcher","fetchPairData","provider","getDefaultProvider","getNetwork","Contract","IDefimistPair","abi","getReserves","reserves0","reserves1","balances","IDefimistFactory","fetchSwapFee","feeToSetter","fee","owner","fetchSwapFees","liquidityTokens","multicall","PERMISSIVE_MULTICALL_ABI","factoryContract","liquidityTokenContract","calls","callData","encodeFunctionData","getFunction","tokenPairsIndex","aggregate","call","result","decodeFunctionResult","returnData","fees","resultIndex","fetchAllSwapFees","swapFeesCache","allPairsLength","allSwapPairs","tokenPairsCache","keys","tokenPairsToFetch","tokenPaisCacheIndex","pairIndex","tokenPairAddress","swapFeesFetched","tokenPairsToFetchIndex","fetchProtocolFee","feeDenominator","feeTo","feeReceiver"],"mappings":"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"}